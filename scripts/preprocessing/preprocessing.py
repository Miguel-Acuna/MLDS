# -*- coding: utf-8 -*-
"""Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJ-QWLnuYLiWyh-PkA2LqcBShCrIwhYW
"""

!import kagglehub[pandas-dataset]

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import itertools
import kagglehub
from kagglehub import KaggleDatasetAdapter

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

file_path = "Students Social Media Addiction.csv"

# Load the latest version
df = kagglehub.load_dataset(
  KaggleDatasetAdapter.PANDAS,
  "adilshamim8/social-media-addiction-vs-relationships",
  file_path,
  # Provide any additional arguments like
  # sql_query or pandas_kwargs. See the
  # documenation for more information:
  # https://github.com/Kaggle/kagglehub/blob/main/README.md#kaggledatasetadapterpandas
)

print("First 5 records:", df.head())

df.info()

# Check for duplicates
df[df.duplicated()]

#Delete Student_ID column
df_final = df.drop(columns=["Student_ID"])

#Mapping academic levels
df_final["Academic_Level"] = df_final["Academic_Level"].map({
    "Undergraduate": 1,
    "Graduate": 2,
    "High School": 3
})

#Code "country"
le_country = LabelEncoder()
df_final["Country"] = le_country.fit_transform(df_final["Country"])

#Coding of the other categorical columns
cat_cols = df_final.select_dtypes(include='object').columns

le = LabelEncoder()
for col in cat_cols:
    df_final[col] = le.fit_transform(df_final[col])

#Scaling numeric variables

num_cols = df_final.select_dtypes(include=['int64', 'float64']).columns

scaler = StandardScaler()
df_final[num_cols] = scaler.fit_transform(df_final[num_cols])

df_final.head()


X = df_final.drop(columns=['Addicted_Score'])
y = df_final['Addicted_Score']

X_train, X_temp, y_train, y_temp = train_test_split(
    X, y,
    test_size=0.30,
    random_state=42
)

X_val, X_test, y_val, y_test = train_test_split(
    X_temp, y_temp,
    test_size=0.50,
    random_state=42
)

print(f"Train: {X_train.shape[0]} muestras")
print(f"Val:   {X_val.shape[0]} muestras")
print(f"Test:  {X_test.shape[0]} muestras")